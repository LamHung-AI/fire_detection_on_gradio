import gradio as gr
from ultralytics import YOLO

from fire_detection_on_gradio.web_fire_backend.utils import *
from fire_detection_on_gradio.web_fire_database.database import engine
from fire_detection_on_gradio.web_fire_database import models
from fire_detection_on_gradio.web_fire_backend.fire_video_object import FireVideo

models.Base.metadata.create_all(bind=engine)
fire_detection = YOLO('../storage_project/fire_detection.pt')

video_fire = {}

with gr.Blocks(theme='soft') as demo:
    gr.Markdown("""
    # Camera ph√°t hi·ªán ƒë√°m ch√°y
    """)
    current_id_user= gr.State()

    def login(account, password):
        global current_id_user
        is_success , id_now = authentication(account, password)
        current_id_user = id_now
        if is_success:
            gr.Info("ƒêƒÉng nh·∫≠p th√†nh c√¥ng üéâÔ∏èüéâ", duration=3)
            return [gr.update(visible=True), gr.update(visible=True), gr.update(visible=True), gr.update(visible=True), current_id_user]
        else:
            gr.Warning('T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng‚ùå', duration=3)
            return [gr.update(visible=False), gr.update(visible=False), gr.update(visible=False), gr.update(visible=False), None]

    def get_current_id_user():
        return str(current_id_user)

    tab_camera = gr.Tab('üì∏Camera', visible=False)
    tab_luu_tru = gr.Tab('üìÇL∆∞u tr·ªØ', visible=False)
    tab_tuy_chinh = gr.Tab("‚öôÔ∏èT√πy ch·ªânh", visible=False)
    tab_dang_nhap = gr.Tab("ƒêƒÉng nh·∫≠p")
    tab_cai_dat = gr.Tab('C√†i ƒë·∫∑t', visible=False)

    user_id = gr.Textbox(visible=False)
    user_id.change(fn=get_current_id_user, outputs=user_id)

    def detection(img):
        global video_fire, user_id
        config = 0.57
        results = fire_detection.predict(source=img, conf=config)
        annotated_img = results[0].plot()

        prob = results[0].boxes.conf.cpu().numpy()
        print(prob)
        if len(prob) == 0:
            prob = [0]

        if user_id not in video_fire:
            video_fire[user_id] = FireVideo(get_current_id_user())

        if max(prob) > config:
            time_now = datetime.now().strftime("%H-%M-%S__%d-%m-%Y")
            video_fire[user_id].save_video = True
            video_fire[user_id].time = time_now

            #b√°o ch√°y
            gr.Warning("Ph√°t hi·ªán ch√°yüî•üî•üî•üî•", duration=3)

        if video_fire[user_id].save_video is True:
            video_fire[user_id].add_image(annotated_img)
            print(len(video_fire[user_id].images))

        time_now = datetime.now().strftime("%H-%M-%S__%d-%m-%Y")
        if (calculate_time_difference(video_fire[user_id].time, time_now) > 20) and (video_fire[user_id].save_video is True):
            video_fire[user_id].write_video()

        annotated_img_rgb = annotated_img[..., ::-1]
        return annotated_img_rgb

    with tab_dang_nhap:
        username = gr.Textbox(label="T√™n ƒëƒÉng nh·∫≠p", placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p", show_label=True)
        passwd = gr.Textbox(label="M·∫≠t kh·∫©u", type="password", placeholder="Nh·∫≠p m·∫≠t kh·∫©u t·∫°i ƒë√¢y", show_label=True)
        login_button = gr.Button("ƒêƒÉng nh·∫≠p")
        login_button.click(fn = login, inputs=[username, passwd], outputs=[tab_camera, tab_luu_tru, tab_tuy_chinh, tab_cai_dat, user_id])

    with tab_camera:
        with gr.Row():
            inp = gr.Image(sources=["webcam"], label="Camera th∆∞·ªùng", show_label=True, type="pil", width = 384, height=216, scale=1)
            out = gr.Image(label="Camera ph√°t hi·ªán ƒë√°m ch√°y", show_label=True, scale=2)
        inp.stream(fn=detection, inputs=inp, outputs=out)

    def create_fire_video_object(user_id_now):
        global video_fire
        if user_id_now not in video_fire:
            video_fire[user_id_now] = FireVideo(get_current_id_user())

    def update_video_dropdown(user_id_now):
        global video_fire
        create_fire_video_object(user_id_now)
        video_fire[user_id_now].update_fire_videos_paths()
        list_videos = video_fire[user_id_now].fire_video_paths
        return gr.update(choices=list_videos)

    with tab_luu_tru:
        # label = "Select a Video"
        video_dropdown = gr.Dropdown([], label = "Ch·ªçn video ƒë·ªÉ xem")
        gr.Button("Xem t·∫•t c·∫£ video ch√°y").click(fn=update_video_dropdown, inputs=user_id, outputs=video_dropdown)
        # Create a video player
        video_player = gr.Video(label="Video ch√°y", show_label=True)

        # # Function to update the video player based on the selected video
        def update_video(video_path):
            return video_path

        # Set up the event listener to update the video player when a video is selected
        video_dropdown.select(fn=update_video, inputs=video_dropdown, outputs=video_player)
    with tab_tuy_chinh:
        gr.Markdown("# Xem t·∫•t c·∫£ th√¥ng tin ng∆∞·ªùi nh·∫≠n")
        gr.Button("Xem th√¥ng tin").click(fn=post_list_info,
                                        inputs=user_id,
                                        outputs=[gr.DataFrame(label="Th√¥ng tin ng∆∞·ªùi nh·∫≠n th√¥ng b√°o ch√°y", show_label=True)]
                                         )

        gr.Markdown("# Th√™m th√¥ng tin ng∆∞·ªùi nh·∫≠n th√¥ng b√°o ch√°y")
        with gr.Row():
            ho_ten_nguoi_nhan = gr.Textbox(label="H·ªç t√™n ng∆∞·ªùi nh·∫≠n m·ªõi", show_label=True, placeholder="Nh·∫≠p h·ªç t√™n ng∆∞·ªùi nh·∫≠n m·ªõi", scale=1)
            sdt = gr.Textbox(label="S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n", show_label=True, placeholder="Nh√¢p s·ªë ƒëi·ªán tho·∫°i",scale=1)
        gr.Button("Th√™m ng∆∞·ªùi nh·∫≠n th√¥ng b√°o").click(fn=add_info,
                                                     inputs=[user_id, ho_ten_nguoi_nhan, sdt])
        gr.Markdown("# X√≥a th√¥ng tin ng∆∞·ªùi nh·∫≠n b√°o ch√°y")
        delete_sdt = gr.Textbox(label="S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi nh·∫≠n c·∫ßn x√≥a", show_label=True, placeholder="Nh√¢p s·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi")
        gr.Button('X√≥a ng∆∞·ªùi nh·∫≠n th√¥ng b√°o n√†y').click(fn=delete_info,
                                                        inputs=[user_id, delete_sdt]
                                                        )

    with tab_cai_dat:
        gr.Markdown("# Th√¥ng tin c·ªßa t√†i kho·∫£n")
        ho_ten = gr.Textbox(label="H·ªç t√™n", show_label=True)
        ngay_sinh = gr.Textbox(label="Ng√†y sinh", show_label=True)
        sdt = gr.Textbox(label="S·ªë ƒëi·ªán tho·∫°i", show_label=True)
        email = gr.Textbox(label="Email", show_label=True)
        diachi = gr.Textbox(label="ƒê·ªãa ch·ªß", show_label=True)

        gr.Markdown("# T·∫•t c·∫£ th√¥ng tin v·ªÅ camera")
        all_camera = gr.DataFrame(label="Camera", show_label=True)
        gr.Button("Xem th√¥ng tin").click(fn=info_user, inputs=user_id, outputs=[ho_ten, ngay_sinh, sdt, email, diachi, all_camera])

        gr.Markdown("# ƒê·ªïi m·∫≠t kh·∫©u")
        old_password = gr.Textbox(label="M·∫≠t kh·∫©u c≈©", show_label=True,
                                 placeholder="Nh·∫≠p m·∫≠t kh·∫©u c≈©", type="password")
        password1 = gr.Textbox(label="M·∫≠t kh·∫©u m·ªõi", show_label=True,
                             placeholder="Nh√¢p m·∫≠t kh·∫©u m·ªõi", type="password")
        password2 = gr.Textbox(label="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi", show_label=True,
                               placeholder="Nh√¢p l·∫°i m·∫≠t kh·∫©u m·ªõi", type="password")
        gr.Button('ƒê·ªïi m·∫≠t kh·∫©u').click(fn=change_password,
                                        inputs=[user_id, old_password, password1, password2]
                                        )
demo.launch()